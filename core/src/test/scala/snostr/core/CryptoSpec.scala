package snostr.core

import org.scalatest.flatspec.AnyFlatSpec
import org.scalatest.matchers.should.Matchers
import snostr.core.Crypto.{decryptDirectMessageAES, decryptDirectMessageXChaCha20, encryptDirectMessageAES, encryptDirectMessageXChaCha20}

class CryptoSpec extends AnyFlatSpec with Matchers {

  it should "support NIP-04 encryption scheme" in {
    val sk1 = NostrPrivateKey.freshPrivateKey
    val pk1 = sk1.publicKey

    val sk2 = NostrPrivateKey.freshPrivateKey
    val pk2 = sk2.publicKey

    val encrypted = encryptDirectMessageAES(sk1, pk2, "hello")
    val decrypted = decryptDirectMessageAES(sk2, pk1, encrypted)

    decrypted should be("hello")
  }

  it should "decrypt NIP-04 content generated by nostr-tools" in {
    val sk1 = NostrPrivateKey.fromHex("33a14114d681985e2e21e9e628c5f3aaed96a7363fdea7a1be58ab933a9738e6")
    val pk1 = sk1.publicKey

    val sk2 = NostrPrivateKey.fromHex("d53307570475ac0c2d612034ec28d7d557402be9567824504b8167d123550f1c")

    val encrypted = "tSKt0HHtFVvGQ2g0x9afSQ==?iv=qIOG9pFg/HquenH+/2VyfA=="
    val decrypted = decryptDirectMessageAES(sk2, pk1, encrypted)

    decrypted should be("hello")
  }

  it should "support NIP-44 encryption scheme v1" in {
    val sk1 = NostrPrivateKey.freshPrivateKey
    val pk1 = sk1.publicKey

    val sk2 = NostrPrivateKey.freshPrivateKey
    val pk2 = sk2.publicKey

    val encrypted = encryptDirectMessageXChaCha20(sk1, pk2, "Γεια")
    println(encrypted)
    val decrypted = decryptDirectMessageXChaCha20(sk2, pk1, encrypted)

    decrypted should be("Γεια")
  }

  it should "decrypt NIP-44 v1 content generated by nostr-tools" in {
    val sk1 = NostrPrivateKey.fromHex("dc4a6c651895c547182b83e44ac2ac5c7c848ae435566f53102317ad59981897")
    val pk1 = sk1.publicKey

    val sk2 = NostrPrivateKey.fromHex("8754dd9ab6e94457c3d157a922df0224b9c91b9bf843237279c4769e5d6854e3")

    val encrypted = "1,x7NML/S68o0kM5TLrtnJCFbuhS66KmX9,LD9A3tw="
    val decrypted = decryptDirectMessageXChaCha20(sk2, pk1, encrypted)

    decrypted should be("hello")
  }


}
