package snostr.core

import org.scalatest.flatspec.AnyFlatSpec
import org.scalatest.matchers.should.Matchers
import snostr.core.Crypto.{decryptDirectMessage, encryptDirectMessage}

class CryptoSpec extends AnyFlatSpec with Matchers {

  it should "support NIP04 encryption scheme" in {
    val sk1 = NostrPrivateKey.freshPrivateKey
    val pk1 = sk1.publicKey

    val sk2 = NostrPrivateKey.freshPrivateKey
    val pk2 = sk2.publicKey

    val encrypted = encryptDirectMessage(sk1, pk2, "hello")
    val decrypted = decryptDirectMessage(sk2, pk1, encrypted)

    decrypted should be("hello")
  }

  it should "decrypt content generated by nostr-tools" in {
    val sk1 = NostrPrivateKey.fromHex("33a14114d681985e2e21e9e628c5f3aaed96a7363fdea7a1be58ab933a9738e6")
    val pk1 = sk1.publicKey

    val sk2 = NostrPrivateKey.fromHex("d53307570475ac0c2d612034ec28d7d557402be9567824504b8167d123550f1c")

    val encrypted = "tSKt0HHtFVvGQ2g0x9afSQ==?iv=qIOG9pFg/HquenH+/2VyfA=="
    val decrypted = decryptDirectMessage(sk2, pk1, encrypted)

    decrypted should be("hello")
  }

}
